JS惰性载入方式创建类
20150612.

惰性加载方式和动态原型方式的类，API都是在实例化的时候绑定的，不过他们在实现上却不一样，惰性加载的方式相对更加干净，无需添加额外属性。

###最简单的惰性加载类
code.js[off]
function A(){
	A = function(){};
	//...各种类的初始化和API绑定
	return new A;
}
new A; //加载类A，并且实现实例化
new A; //实例化
//当第一次执行new A的时候，类A将实现真正的加载，实现初始化和API绑定
.

###惰性加载类的实现
1. 惰性加载
2. 解决可变数传递参数问题

所谓惰性加载类无非就是让类在被用到的时候才执行初始化和绑定相关API（不使用的情况下不会执行对应的代码），这样做能提高脚本的初始化速度和页面的加载速度，同时节约更多的CPU和内存来处理必要的操作。

在惰性加载的过程中，会出现参数传递的问题，见以下代码

###实例1的参数无法被传递
code.js
function A(){
	A = function(){
		this.len = arguments.length;
	};
	A.prototype = {
		getLen: function(){
			return this.len;
		}
	};
	return new A();
}
var c1 = new A(1, 2);
var c2 = new A(1, 2);
alert(c1.getLen()); //c1参数无法传递
alert(c2.getLen());
.

###实例2的参数无法被传递
code.js
function A(){
	A = function(args){
		this.len = args.length;
	};
	A.prototype = {
		getLen: function(){
			return this.len;
		}
	};
	return new A(arguments);
}
var c1 = new A(1, 2);
var c2 = new A(1, 2);
alert(c1.getLen());
alert(c2.getLen()); //c2参数无法传递
.

###解决参数传递详解
xinfo 在上面2种方式中，都存在参数传递问题，为了解决这个问题，必须对他们进行适当的改造。

code.js
function A(){
	A = function(args){
		B.apply(this, args); //通过调用apply的方式实现类的初始化，继承B类
		A = B; //重写为B
	};
	function B(){ //构造函数
		this.len = arguments.length;
	}
	
	A.prototype = B.prototype = {
		constructor: B,
		getLen: function(){
			return this.len;
		}
	};
	
	return new A(arguments);
}
var c1 = new A(1, 2);
var c2 = new A(1, 2);
alert(c1.getLen());
alert(c2.getLen());
.

至此，惰性加载的类已经完成了参数传递的任务，当然，我们可以对他进行一些修改，让他看的更加一元化一些。

code.js
//取消内部类B，直接用constructor替代
function A(){
	A = function(args){
		var constructor = this.constructor;
		constructor.prototype = A.prototype;
		constructor.apply(this, args);
		A = constructor; //重写类的指向
	};
	
	A.prototype = {
		constructor: function(){
			this.len = arguments.length;
		},
		getLen: function(){
			return this.len;
		}
	};
	
	return new A(arguments);
}
var c1 = new A(1, 2);
var c2 = new A(1, 2);
alert(c1.getLen());
alert(c2.getLen());
.

###更多的扩展

1. 可以省略new的方式创建类
2. 晚期绑定API
3. 支持静态方法

xinfo 因为惰性载入创建的类不管在使用上还是原理结构上都没什么差别，所以以上的一些特征跟常规创建类的方式基本一致。
code.js
function A(){
	A = function(args){
		var constructor = this.constructor;
		constructor.prototype = A.prototype;
		constructor.apply(this, args);
		//在重写A指针前面拷贝静态方法
		for(args in A){
			constructor[args] = A[args];
		}
		
		A = constructor; //重写类的指向
	};
	
	A.prototype = {
		constructor: function(){
			//判断当前对象是不是A的实例，略写new创建类的小技巧
			if(!(this instanceof A)){
				var a = new A;
				A.apply(a, arguments);
				return a;
			}
			
			this.len = arguments.length;
		},
		getLen: function(){
			return this.len;
		}
	};
	
	A.getName = function(){
		return 'A';
	};
	
	return new A(arguments);
}
var c1 = new A(1, 2);
var c2 = A(1, 2, 3);
alert(c1.getLen());
alert(c2.getLen());
alert(c2 instanceof A);
//晚期绑定API
A.prototype.getLen2 = function(){
	return this.getLen();
};
alert(c1.getLen2());
alert(c2.getLen2());
.
###应用场景
1. 拥有大量接口和配置的类
2. 被执行概率极低的类
3. 需要实现运行监测的类
