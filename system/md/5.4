浅谈网站性能优化
20150612.
###前言

本文从各角度简单介绍下网站性能优化方面的知识，具体细节不做展开。

###网站性能优化分析

1. DNS优化
2. 使用CDN
3. HTTP请求优化
4. 优化资源文件
5. 代码优化
6. 网站部署优化
7. 其他...

###DNS优化

网站DNS解析需要耗费时间，所以DNS优化的常见策略有DNS预加载，减少DNS查询数。

xinfo 我们常常通过增加域名个数来提高资源并行加载数，不过这同时增加了DNS解析耗时，所以合理的控制域名个数。<br/>DNS预加载有点像资源预加载，就是在网络空闲的时候提前解析可能被访问的域名。

###使用CDN

使用CDN提高请求响应速度。

mlink[内容分发网络]http://baike.baidu.com/view/21895.htm


###HTTP请求优化

1. 减少请求数
2. 减少请求头
3. 设置文件缓存
4. 开启Gzip
5. 多域名并行
6. 正确使用GET

####减少请求数

合并JS，CSS，图片文件，避免重定向，设置缓存策略，资源文件内嵌

xinfo 重定向会导致多一次HTTP请求。
xinfo 通过设置文件缓存的过期时间，当文件缓存有效期内浏览器不会发起对文件的HTTP请求而直接从缓存中返回。
xinfo 资源文件内嵌：比如JS，CSS文件内嵌到HTML中，甚至是图片采用base64编码内嵌到HTML和CSS文件中。


####减少请求头

HTTP请求头是客户端发送到服务端的一些信息，所以减少请求头来减少数据传输。

xinfo 比如每个HTTP请求都会发送用户的Cookie信息，减少cookie的大小，甚至让静态资源文件使用无Cookie的域名。

####设置文件缓存

通过设置文件缓存触发304响应来减少网络数据传输量，提升网站响应速度。

xinfo 常见缓存策略：Last-Modified，Etag，Expires，Cache-Control 

####开启Gzip

可以针对一些文本资源开启Gzip实现压缩来减少网络传输量。

####多域名并行

由于单个域名的并行请求数量是有限制的，所有增加域名个数可以增加并行请求数，提升资源加载速度。

xinfo 在HTTP/1.1协议下，单个域名的最大连接数在IE6中是2个，而在其它浏览器中一般4-8个，而整体最大链接数在30左右。

####正确使用GET

GET可以被缓存，并且在大多数情况下GET只需要发送一个数据包，而POST必须大于1个。

xinfo 可以查看GET与POST的区别
###优化资源文件

压缩HTML，CSS，JS，优化图片。

###代码优化

1. HTML优化
2. CSS优化
3. JS优化

####HTML优化

避免使用iframe，尝试替换绝对URL为相对，尽量浅的HTML结构层次，避免内联样式，删除多余的默认属性等

xinfo HTML层次太深不利于代码解析渲染，也不利于书写样式；省略多余属性，类似type属性，比如使用短的doctype。

####CSS优化

使用继承，简写合并属性，提高样式重用，避免css表达式。

xinfo 通过继承可以大大减少代码量，同时便于维护，合并一些如background，font属性，省略比如0px的px单位。

####JS优化

+ 减少dom操作
+ 避免复杂的DOM查询
+ 使用局部变量
+ 避免过度封装
+ 减少重复运算
+ 替换大递归为循环
+ 首选使用原生方法
+ 拆分大运算避免浏览器假死
+ 大量的同类事件采用代理模式处理
+ 动画设置节点为脱离流，减少渲染成本
+ 尝试替换POST请求为GET，GET可以被缓存
+ 设置样式尽量避免零碎操作，替换为改变className实现

###网站部署优化

1. CSS，JS部署
2. 尽早Flush
3. 延迟加载
4. 预加载

####CSS，JS部署

CSS在头部部署，JS在尾部部署。

xinfo JS底部是避免阻塞，CSS顶部是页面渲染依赖CSS规则，不放头部可能会导致页面闪烁甚至是一段时间的页面无样式。

####尽早Flush

尽早Flush出服务器的内容，让资源尽快加载，页面内容尽快显示。

xinfo 假如一个页面的内容需要进行比较耗时的操作，那么尽早Flush出已经准备好的数据，比如&lt;head>内容，那么页面就会开始加载css和js资源而无需等待整个页面数据的就绪，从而缩短页面呈现时间。

####延迟加载

在交互复杂的页面中，往往需要大量的JS逻辑来支持，但是页面的交互逻辑有主次性，先后性，所以延迟一些不重要的和一些非立即触发的模块的加载从而让重要的内容更快的加载。

xinfo 比如非首屏的图片延迟加载，一些JS组件按需延迟加载等，延迟加载脚本可以避免很多的阻塞情景。

####预加载

在空闲的时候提早加载一些可能被用到的资源，以便在后续处理中有更快的响应速度。

###其他

+ 采用GBK替换UTF-8
+ ...