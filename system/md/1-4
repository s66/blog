一个静态化博客系统的实现

###前言

为方便书写和部署博客系统，本次采用JS调用Markdown驱动HTML模版生成HTML文件，生成的页面纯静态html，无需动态环境支持。

####流程图

rimg[博客设计流程图]/imgs/blog_design.jpg

###html模版的设计

html模版分为：layout（布局），list（列表页），page（日志页）

zimg[本博客使用的模板例子]/imgs/20131011151644.jpg

1. about.html   关于页面模板
2. header.html  头部模板
3. layout.html  布局模板
3. list.html    导航页模板
4. nav.html     左侧导航模板
5. post.html    日志页模板

xinfo 可以根据情况设置更多模板

####layout模板

code.html[edit=off]
<!doctype html>
<html>
<head>
<meta charset="utf-8"/>
<title>前端开发</title>
<link href="/css/main.css" rel="stylesheet"/>
<script src="/js/blog.js"></script>
</head>
<body>
<?$inc($mainTemplate)?> <!-- 这里的$mainTemplate将从JS环境中读取 -->
</body>
</html>
.

####list模板

code.html[edit=off]
<div id="index">
	<?$inc('header.html')?>
	<div id="main">
        {$navHtml}
		<div id="list">
			<h3>{$categoryText}</h3>
			<ul>
				<?
					if($postList.length){
						$each($postList, function(i, post){
							$push('<li><a href="post/'+post.id+'.html">'+post.title+'</a><span>'
                                + formatDate(post.lastmodified) +'</span></li>');
						});
					}else{
						$push('<li class="none">暂无日志</li>');
					}
                    function formatDate(ms){
                        var d = new Date(ms);
                        return [d.getFullYear(), d.getMonth()+1, d.getDate()]
                            .join('-').replace(/-(\d)\b/g, '-0$1');
                    }
				?>
			</ul>
		</div>
	</div>
</div>
.

####post模板

code.html[edit=off]
<div id="post">
	<section id="main">
		<h2 class="title">{$postTitle}</h2> <!-- 日志标题 -->
		<div class="post">{$postData}</div> <!-- 日志内容 -->
	</section>
</div>
.

xinfo &lt;? 里面的代码将被JS执行 ?&gt;<br>{$postTitle} 将从变量 $postTitle 中读取


###使用markdown

使用简洁的markdown语法，并且添加了自定义的私有语法以便生成富格式，比如样式和语法高亮的支持。

####扩展markdown语法

code.html[edit=off]
----
例如
	<!-- 语法高亮 -->
	code.html[edit=off]
    <div>
        <span>test</span>
    </div>
	.
    转成
	< textarea class="lang-html" edit=off>
    <div>
        <span>test</span>
    </div></ textarea>
----
例如：
	<!-- 带样式的a链接 -->
    mlink[一个ie6的bug]href
    转成
    <a class="mlink" href="href" target="_blank">一个ie6的bug</a>
----
例如：
	<!-- 带样式的图片标签 -->
    zimg[一张靓图]11234.jpg
    转成
    <p class="zimg">
        <img src="11234.jpg"/>
        <em>一张靓图</em>
    </p>
----
例如：
	<!-- 带样式的文本 -->
    xinfo 字符串解说的好啊
    转成
    <p class="xinfo">字符串解说的好啊</p>
.
###系统设计相关数据

code.html[edit=off]
const //常量
    $CATEGORY = 分类信息
    $USERPAGE = 自定义页面
    TEMPLATE_PATH = 模板地址

cache //缓存
    postinfoCache //日志信息
    navHtmlCache //模板nav
data
    postinfoData //日志源数据
    userpageData //自定义页面
func //函数，变量
    _fs = 文件操作
    clearBlank = 清除空白
    debugWriteText = 调式写文件
    tpath = 返回模板路径
    rebuild = 是否重构页面
    categoryFlag = 需要更新的分类标志
模板变量
    $postTitle = 日志标题
    $postData = 日志内容
    $mainTemplate = 页面主模块
    $takenTime = 页面生成花费时间
    $debugFiles = 生成的页面路径信息
功能：
    1. 生成页面
    2. 重构页面
    
    生成页面
        + 加载配置
        + 扫描md目录生成postinfoData
        + 加载cache
        + 对比postinfoData和postinfoCache生成日志更新列表
        + 加载模板
        + 生成日志页
        + 更新列表缓存
        + 生成列表导航页
        + 生成首页
        + 输出debug结果
    重构页面
        + 读取rebuild参数
        + 重置cache resetCache
        + 遍历$USERPAGE
        + 生成navHtmlCache
        + 生成userpageData页面
        + 生成页面
.


