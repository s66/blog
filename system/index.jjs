<?!function($GET){		var debug = $require('debug.js');	var template = $require('template.js');		var postIndexCache; //日志索引缓存	var postForUpdate; //待更新的日志		var isRebuild = $GET['rebuild'];			//缓存数据        var cachePath = $mappath('cache');    var postIndexCachePath = cachePath +'/postindexcache.json';		if(checkUpdate()){		doUpdate();	}	viewPage();	debug.show();		//检测日志更新情况	function checkUpdate(){		postIndexCache = getPostIndexCache();		//获取日志索引更新状态		var data = [];		getPostIndex().forEach(function(item, i){			var name = item.name; //category-id            var lastmodified = item.lastmodified;			var cache = postIndexCache[name];			if(				!cache //不在缓存中 				|| cache && cache.lastmodified != lastmodified //在缓存中，但是修改时间不一致			){                 data.push({name: name, lastmodified: lastmodified});			}		});		if(data.length){			postForUpdate = data;			return true;		}				//获取日志索引缓存		function getPostIndexCache(){			if(isRebuild || !Fs.exists(postIndexCachePath)){ //重构页面和缓存文件不存在，则生成空缓存				return {};			}			return JSON.parse(Fs.readText(postIndexCachePath)); 		}			//获取日志索引		function getPostIndex(){			var list = [];			Fs.eachFiles($mappath('md'), function(file){				if(!~file.name.indexOf('_')){ //插入不是_开始的文件					list.push({						name: file.name,						lastmodified: +file.DateLastModified					});				}							});			return list;		}			}	//检测tags是否更新	function checkTags(){							}		//更新缓存和生成新页面	function doUpdate(){		//更新索引页，日志页，自定义页		var listForUpdate = {};		if(isRebuild){			CONFIG.Category.forEach(function(item){				listForUpdate[item.id] = true;			});		}			postForUpdate.forEach(function(item, i){			var name = item.name;			var lastmodified = item.lastmodified;			var path = $mappath('md/'+ name); //md路径			var info = { //更新modified                lastmodified: lastmodified,                category: name.split('-')[1],                id: name.split('-')[0]            };			var text = Fs.readText(path, 936).replace(/([^\n\r]+)\s+(?:,(\S+))?/, function(all, title, tags){ //获取标题                info.title = title; //标题				info.tags = tags ? tags.split(',') : []; //标签数据                return '';            });			postIndexCache[name] = info;  //更新索引缓存			listForUpdate[info.category] = true; //添加更新列表页						//生成日志			debug.writeText($mappath('../post/' + info.id + '.html'), template('detail', {				info: info,				text: text			}));				});						debug.writeText(postIndexCachePath, JSON.stringify(postIndexCache)); //更新索引缓存文件		var listData = {};		for(var category in listForUpdate){						var allList = getPostlistData();			listData.all = allList;						allList.forEach(function(item){				if(!listData[item.category]){					listData[item.category] = [];				}				listData[item.category].push(item);			});						//生成首页			debug.writeText($mappath('../index.html'), template('list', {				category: 0,				list: allList			}));						break;		}				for(var category in listForUpdate){			//生成列表			debug.writeText($mappath('../' + category + '.html'), template('list', {				category: category,				list: listData[category]			}));		}				if(isRebuild){			//生成自定义页面			CONFIG.userpages.forEach(function(info){				debug.writeText($mappath('../' + info.id + '.html'), template('other', info));			});		}			}		//从缓存列表中生成文章列表	function getPostlistData(){		var allList = [];		for(var name in postIndexCache){			allList.push(postIndexCache[name]);		}		return allList.sort(function(a, b){ //根据修改时间降序			return a.lastmodified < b.lastmodified ? 1 : -1;		});	}		//预览页面	function viewPage(){        var view = $GET['view'];        if(isRebuild){            view = 'index';        }        if(!view){            var postlistData = getPostlistData();            if(!postlistData.length){                debug.push('暂无日志！');                view = 'index';            }else{                view = 'post/'+ postlistData[0].id ;            }                    }		if(Fs.exists($mappath('../'+ view + '.html'))){			$push(Fs.readText($mappath('../'+ view + '.html')).replace(/href="((?:post\/)?\w+)\.html"/g, function(match, m0){				return 'href="?view='+ m0 +'"';            			})); 		}		            }		}(Request.getQuery());?>